"""
Chaos Engineering —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
–¢–µ—Å—Ç–∏—Ä—É—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–±–æ—è—Ö –∏ –Ω–µ—à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
"""
import pytest
import asyncio
import aiohttp
import random
import time
import psutil
import os
from unittest.mock import patch, MagicMock
from contextlib import asynccontextmanager
from typing import Dict, Any, List, Callable
import json
from datetime import datetime


class ChaosScenario:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ö–∞–æ—Å–∞"""
    
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.is_active = False
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Ö–∞–æ—Å–∞"""
        self.is_active = True
        print(f"üî• Starting chaos scenario: {self.name}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Ö–∞–æ—Å–∞"""
        self.is_active = False
        print(f"‚úÖ Stopped chaos scenario: {self.name}")
    
    async def execute(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Ö–∞–æ—Å–∞"""
        raise NotImplementedError


class DatabaseChaosScenario(ChaosScenario):
    """–°—Ü–µ–Ω–∞—Ä–∏–∏ —Ö–∞–æ—Å–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        super().__init__("Database Chaos", "–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    
    async def execute(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ë–î"""
        scenarios = [
            self._simulate_connection_timeout,
            self._simulate_slow_queries,
            self._simulate_connection_pool_exhaustion,
            self._simulate_deadlocks
        ]
        
        scenario = random.choice(scenarios)
        await scenario()
    
    async def _simulate_connection_timeout(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        print("üí• Simulating database connection timeout")
        
        with patch('app.core.database.AsyncSessionLocal') as mock_session:
            mock_session.side_effect = asyncio.TimeoutError("Connection timeout")
            await asyncio.sleep(5)  # –î–µ—Ä–∂–∏–º —Ö–∞–æ—Å 5 —Å–µ–∫—É–Ω–¥
    
    async def _simulate_slow_queries(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("üêå Simulating slow database queries")
        
        original_execute = None
        
        async def slow_execute(*args, **kwargs):
            await asyncio.sleep(random.uniform(2, 5))  # –ó–∞–¥–µ—Ä–∂–∫–∞ 2-5 —Å–µ–∫—É–Ω–¥
            if original_execute:
                return await original_execute(*args, **kwargs)
        
        with patch('sqlalchemy.ext.asyncio.AsyncSession.execute', side_effect=slow_execute):
            await asyncio.sleep(10)
    
    async def _simulate_connection_pool_exhaustion(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        print("üî• Simulating connection pool exhaustion")
        
        with patch('app.core.database.get_db') as mock_get_db:
            mock_get_db.side_effect = Exception("Connection pool exhausted")
            await asyncio.sleep(3)
    
    async def _simulate_deadlocks(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–µ–¥–ª–æ–∫–æ–≤ –≤ –ë–î"""
        print("üîí Simulating database deadlocks")
        
        with patch('sqlalchemy.ext.asyncio.AsyncSession.commit') as mock_commit:
            mock_commit.side_effect = Exception("Deadlock detected")
            await asyncio.sleep(4)


class NetworkChaosScenario(ChaosScenario):
    """–°—Ü–µ–Ω–∞—Ä–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Ö–∞–æ—Å–∞"""
    
    def __init__(self):
        super().__init__("Network Chaos", "–°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º")
    
    async def execute(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        scenarios = [
            self._simulate_network_latency,
            self._simulate_packet_loss,
            self._simulate_network_partition,
            self._simulate_dns_failure
        ]
        
        scenario = random.choice(scenarios)
        await scenario()
    
    async def _simulate_network_latency(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã—Å–æ–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏"""
        print("üåê Simulating high network latency")
        
        original_request = aiohttp.ClientSession.request
        
        async def delayed_request(self, *args, **kwargs):
            await asyncio.sleep(random.uniform(1, 3))  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1-3 —Å–µ–∫—É–Ω–¥—ã
            return await original_request(self, *args, **kwargs)
        
        with patch.object(aiohttp.ClientSession, 'request', delayed_request):
            await asyncio.sleep(8)
    
    async def _simulate_packet_loss(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤"""
        print("üì¶ Simulating packet loss")
        
        async def random_failure_request(self, *args, **kwargs):
            if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–±–æ—è
                raise aiohttp.ClientError("Packet lost")
            return await aiohttp.ClientSession.request(self, *args, **kwargs)
        
        with patch.object(aiohttp.ClientSession, 'request', random_failure_request):
            await asyncio.sleep(6)
    
    async def _simulate_network_partition(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ç–∏"""
        print("üîå Simulating network partition")
        
        with patch('aiohttp.ClientSession.request') as mock_request:
            mock_request.side_effect = aiohttp.ClientError("Network unreachable")
            await asyncio.sleep(5)
    
    async def _simulate_dns_failure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—è DNS"""
        print("üåç Simulating DNS failure")
        
        with patch('aiohttp.ClientSession.request') as mock_request:
            mock_request.side_effect = aiohttp.ClientError("DNS resolution failed")
            await asyncio.sleep(4)


class ResourceChaosScenario(ChaosScenario):
    """–°—Ü–µ–Ω–∞—Ä–∏–∏ —Ö–∞–æ—Å–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        super().__init__("Resource Chaos", "–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
    
    async def execute(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
        scenarios = [
            self._simulate_memory_pressure,
            self._simulate_cpu_spike,
            self._simulate_disk_full,
            self._simulate_file_descriptor_exhaustion
        ]
        
        scenario = random.choice(scenarios)
        await scenario()
    
    async def _simulate_memory_pressure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
        print("üß† Simulating memory pressure")
        
        # –í—ã–¥–µ–ª—è–µ–º –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏
        memory_hog = []
        try:
            for _ in range(100):
                memory_hog.append(bytearray(1024 * 1024))  # 1MB –±–ª–æ–∫–∏
                await asyncio.sleep(0.1)
        except MemoryError:
            print("Memory exhausted!")
        finally:
            del memory_hog
    
    async def _simulate_cpu_spike(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU"""
        print("‚ö° Simulating CPU spike")
        
        def cpu_intensive_task():
            end_time = time.time() + 5  # 5 —Å–µ–∫—É–Ω–¥ –Ω–∞–≥—Ä—É–∑–∫–∏
            while time.time() < end_time:
                # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                sum(i * i for i in range(1000))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        tasks = []
        for _ in range(psutil.cpu_count()):
            task = asyncio.create_task(asyncio.to_thread(cpu_intensive_task))
            tasks.append(task)
        
        await asyncio.gather(*tasks)
    
    async def _simulate_disk_full(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏—Å–∫–∞"""
        print("üíæ Simulating disk full")
        
        with patch('builtins.open') as mock_open:
            mock_open.side_effect = OSError("No space left on device")
            await asyncio.sleep(3)
    
    async def _simulate_file_descriptor_exhaustion(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤"""
        print("üìÅ Simulating file descriptor exhaustion")
        
        with patch('builtins.open') as mock_open:
            mock_open.side_effect = OSError("Too many open files")
            await asyncio.sleep(4)


class ServiceChaosScenario(ChaosScenario):
    """–°—Ü–µ–Ω–∞—Ä–∏–∏ —Ö–∞–æ—Å–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        super().__init__("Service Chaos", "–°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ–µ–≤ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    async def execute(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ–µ–≤ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        scenarios = [
            self._simulate_redis_failure,
            self._simulate_email_service_failure,
            self._simulate_payment_service_failure,
            self._simulate_file_storage_failure
        ]
        
        scenario = random.choice(scenarios)
        await scenario()
    
    async def _simulate_redis_failure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—è Redis"""
        print("üî¥ Simulating Redis failure")
        
        with patch('app.core.cache.cache_manager.get') as mock_get:
            mock_get.side_effect = Exception("Redis connection failed")
            await asyncio.sleep(5)
    
    async def _simulate_email_service_failure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—è email —Å–µ—Ä–≤–∏—Å–∞"""
        print("üìß Simulating email service failure")
        
        with patch('app.services.email_client.EmailClient.send_email') as mock_send:
            mock_send.side_effect = Exception("SMTP server unavailable")
            await asyncio.sleep(4)
    
    async def _simulate_payment_service_failure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        print("üí≥ Simulating payment service failure")
        
        with patch('app.api.mango.process_payment') as mock_payment:
            mock_payment.side_effect = Exception("Payment gateway timeout")
            await asyncio.sleep(6)
    
    async def _simulate_file_storage_failure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        print("üìÇ Simulating file storage failure")
        
        with patch('builtins.open') as mock_open:
            mock_open.side_effect = IOError("Storage unavailable")
            await asyncio.sleep(3)


class ChaosTestRunner:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è chaos engineering —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.scenarios = [
            DatabaseChaosScenario(),
            NetworkChaosScenario(),
            ResourceChaosScenario(),
            ServiceChaosScenario()
        ]
        self.metrics = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "error_types": {},
            "response_times": [],
            "recovery_times": []
        }
    
    async def run_chaos_test(self, duration: int = 60, normal_load: bool = True):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å chaos engineering —Ç–µ—Å—Ç"""
        print(f"üöÄ Starting chaos engineering test for {duration} seconds")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
        normal_load_task = None
        if normal_load:
            normal_load_task = asyncio.create_task(self._generate_normal_load())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º chaos scenarios
        chaos_task = asyncio.create_task(self._run_chaos_scenarios(duration))
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–∏—Å—Ç–µ–º—É
        monitoring_task = asyncio.create_task(self._monitor_system(duration))
        
        try:
            await asyncio.gather(chaos_task, monitoring_task)
        finally:
            if normal_load_task:
                normal_load_task.cancel()
        
        return self.metrics
    
    async def _generate_normal_load(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
        async with aiohttp.ClientSession() as session:
            while True:
                try:
                    start_time = time.time()
                    
                    # –°–ª—É—á–∞–π–Ω—ã–π endpoint
                    endpoint = random.choice([
                        "/api/v1/health",
                        "/api/v1/requests/",
                        "/api/v1/transactions/",
                        "/api/v1/metrics/business"
                    ])
                    
                    async with session.get(f"http://localhost:8000{endpoint}") as response:
                        response_time = time.time() - start_time
                        
                        self.metrics["total_requests"] += 1
                        self.metrics["response_times"].append(response_time)
                        
                        if response.status < 400:
                            self.metrics["successful_requests"] += 1
                        else:
                            self.metrics["failed_requests"] += 1
                            error_type = f"HTTP_{response.status}"
                            self.metrics["error_types"][error_type] = \
                                self.metrics["error_types"].get(error_type, 0) + 1
                
                except Exception as e:
                    self.metrics["failed_requests"] += 1
                    error_type = type(e).__name__
                    self.metrics["error_types"][error_type] = \
                        self.metrics["error_types"].get(error_type, 0) + 1
                
                await asyncio.sleep(random.uniform(0.1, 0.5))
    
    async def _run_chaos_scenarios(self, duration: int):
        """–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ö–∞–æ—Å–∞"""
        end_time = time.time() + duration
        
        while time.time() < end_time:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            scenario = random.choice(self.scenarios)
            
            await scenario.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
            scenario_duration = random.uniform(5, 15)
            scenario_task = asyncio.create_task(scenario.execute())
            
            await asyncio.sleep(scenario_duration)
            
            await scenario.stop()
            scenario_task.cancel()
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            await asyncio.sleep(random.uniform(2, 8))
    
    async def _monitor_system(self, duration: int):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è chaos testing"""
        start_time = time.time()
        
        while time.time() - start_time < duration:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            try:
                async with aiohttp.ClientSession() as session:
                    recovery_start = time.time()
                    
                    async with session.get("http://localhost:8000/api/v1/health") as response:
                        if response.status == 200:
                            recovery_time = time.time() - recovery_start
                            self.metrics["recovery_times"].append(recovery_time)
            
            except Exception:
                pass  # –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            
            await asyncio.sleep(1)


class TestChaosEngineering:
    """–¢–µ—Å—Ç—ã chaos engineering"""
    
    @pytest.mark.asyncio
    async def test_database_chaos_resilience(self):
        """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Å–±–æ—è–º –ë–î"""
        scenario = DatabaseChaosScenario()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–∞–æ—Å
        await scenario.start()
        chaos_task = asyncio.create_task(scenario.execute())
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤–æ –≤—Ä–µ–º—è —Ö–∞–æ—Å–∞
        async with aiohttp.ClientSession() as session:
            results = []
            
            for _ in range(10):
                try:
                    async with session.get("http://localhost:8000/api/v1/health") as response:
                        results.append(response.status)
                except Exception as e:
                    results.append(str(e))
                
                await asyncio.sleep(0.5)
        
        await scenario.stop()
        chaos_task.cancel()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
        successful_responses = sum(1 for r in results if r == 200)
        print(f"Successful responses during DB chaos: {successful_responses}/10")
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
        assert successful_responses >= 2
    
    @pytest.mark.asyncio
    async def test_network_chaos_resilience(self):
        """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Å–µ—Ç–µ–≤—ã–º —Å–±–æ—è–º"""
        scenario = NetworkChaosScenario()
        
        await scenario.start()
        chaos_task = asyncio.create_task(scenario.execute())
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –≤—ã–∑–æ–≤—ã
        with patch('aiohttp.ClientSession.request') as mock_request:
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç
            mock_request.side_effect = [
                aiohttp.ClientError("Network error"),
                MagicMock(status=200),
                aiohttp.ClientError("Timeout"),
                MagicMock(status=200)
            ]
            
            results = []
            for _ in range(4):
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º resilience –ª–æ–≥–∏–∫—É
                    result = await self._test_external_call()
                    results.append(result)
                except Exception as e:
                    results.append(str(e))
        
        await scenario.stop()
        chaos_task.cancel()
        
        print(f"Network chaos test results: {results}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        assert len(results) > 0
    
    @pytest.mark.asyncio
    async def test_resource_exhaustion_resilience(self):
        """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤"""
        scenario = ResourceChaosScenario()
        
        await scenario.start()
        chaos_task = asyncio.create_task(scenario.execute())
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        initial_memory = psutil.Process().memory_info().rss
        
        await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ö–∞–æ—Å–∞
        
        current_memory = psutil.Process().memory_info().rss
        memory_increase = current_memory - initial_memory
        
        await scenario.stop()
        chaos_task.cancel()
        
        print(f"Memory increase during chaos: {memory_increase / 1024 / 1024:.2f} MB")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç —á—Ä–µ–∑–º–µ—Ä–Ω–æ –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤
        assert memory_increase < 500 * 1024 * 1024  # –ú–µ–Ω–µ–µ 500MB
    
    @pytest.mark.asyncio
    async def test_service_failure_resilience(self):
        """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Å–±–æ—è–º –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        scenario = ServiceChaosScenario()
        
        await scenario.start()
        chaos_task = asyncio.create_task(scenario.execute())
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
        with patch('app.core.cache.cache_manager.get') as mock_cache:
            mock_cache.side_effect = Exception("Cache unavailable")
            
            # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–µ—à–∞
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get("http://localhost:8000/api/v1/health") as response:
                        assert response.status in [200, 503]  # OK –∏–ª–∏ Service Unavailable
                except Exception:
                    pass  # –î–æ–ø—É—Å—Ç–∏–º–æ –ø—Ä–∏ chaos testing
        
        await scenario.stop()
        chaos_task.cancel()
    
    @pytest.mark.asyncio
    async def test_full_chaos_scenario(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–±–æ—è–º–∏"""
        runner = ChaosTestRunner()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π chaos test –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        metrics = await runner.run_chaos_test(duration=30, normal_load=True)
        
        print(f"Full chaos test metrics: {json.dumps(metrics, indent=2)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        assert metrics["total_requests"] > 0
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
        if metrics["total_requests"] > 0:
            success_rate = metrics["successful_requests"] / metrics["total_requests"]
            print(f"Success rate during chaos: {success_rate:.2%}")
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            assert success_rate >= 0.1  # –•–æ—Ç—è –±—ã 10% –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã
    
    async def _test_external_call(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –≤–Ω–µ—à–Ω–∏–π –≤—ã–∑–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get("http://example.com") as response:
                        return response.status
            except Exception as e:
                if attempt == max_retries - 1:
                    raise
                await asyncio.sleep(0.1 * (2 ** attempt))  # Exponential backoff
        
        return "Failed after retries"


class TestChaosRecovery:
    """–¢–µ—Å—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ö–∞–æ—Å–∞"""
    
    @pytest.mark.asyncio
    async def test_system_recovery_after_chaos(self):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Ö–∞–æ—Å–∞"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π —Ö–∞–æ—Å
        scenarios = [
            DatabaseChaosScenario(),
            NetworkChaosScenario(),
            ResourceChaosScenario()
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ö–∞–æ—Å–∞
        for scenario in scenarios:
            await scenario.start()
            chaos_task = asyncio.create_task(scenario.execute())
            await asyncio.sleep(5)  # 5 —Å–µ–∫—É–Ω–¥ —Ö–∞–æ—Å–∞
            await scenario.stop()
            chaos_task.cancel()
        
        # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        await asyncio.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        recovery_attempts = 0
        max_attempts = 30
        
        while recovery_attempts < max_attempts:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get("http://localhost:8000/api/v1/health") as response:
                        if response.status == 200:
                            print(f"System recovered after {recovery_attempts + 1} attempts")
                            break
            except Exception:
                pass
            
            recovery_attempts += 1
            await asyncio.sleep(1)
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
        assert recovery_attempts < max_attempts
    
    @pytest.mark.asyncio
    async def test_graceful_degradation(self):
        """–¢–µ—Å—Ç graceful degradation –ø—Ä–∏ —Å–±–æ—è—Ö"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π –∫–µ—à–∞
        with patch('app.core.cache.cache_manager.get') as mock_cache:
            mock_cache.side_effect = Exception("Cache unavailable")
            
            # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–µ—à–∞, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ
            async with aiohttp.ClientSession() as session:
                start_time = time.time()
                
                try:
                    async with session.get("http://localhost:8000/api/v1/requests/") as response:
                        response_time = time.time() - start_time
                        
                        # –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–º
                        assert response.status in [200, 503]
                        
                        if response.status == 200:
                            print(f"Degraded response time: {response_time:.2f}s")
                            # –î–æ–ø—É—Å–∫–∞–µ–º –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
                            assert response_time < 10.0
                
                except Exception as e:
                    print(f"Expected degradation: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ chaos engineering —Ç–µ—Å—Ç–∞
    async def main():
        runner = ChaosTestRunner()
        metrics = await runner.run_chaos_test(duration=60)
        
        print("=== CHAOS ENGINEERING TEST RESULTS ===")
        print(json.dumps(metrics, indent=2))
        
        if metrics["total_requests"] > 0:
            success_rate = metrics["successful_requests"] / metrics["total_requests"]
            print(f"\nüìä Success Rate: {success_rate:.2%}")
            
            if success_rate >= 0.5:
                print("‚úÖ System shows good resilience")
            elif success_rate >= 0.2:
                print("‚ö†Ô∏è System shows moderate resilience")
            else:
                print("‚ùå System needs better resilience")
    
    asyncio.run(main()) 