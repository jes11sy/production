#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
import subprocess
import json
from datetime import datetime
from typing import Dict, Any, Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from app.utils.subprocess_security import safe_subprocess_run, SubprocessSecurityError
import click

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class SimpleMigrationManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.alembic_ini = "alembic.ini"
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        
    def run_alembic_command(self, command: List[str]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã Alembic"""
        try:
            full_command = ["python", "-m", "alembic"] + command
            result = safe_subprocess_run(
                full_command,
                cwd=self.base_dir
            )
            
            return {
                "success": result.returncode == 0,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
        except Exception as e:
            return {
                "success": False,
                "stdout": "",
                "stderr": str(e),
                "returncode": -1
            }
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é
        current_result = self.run_alembic_command(["current"])
        
        # –ü–æ–ª—É—á–∞–µ–º head —Ä–µ–≤–∏–∑–∏—é
        head_result = self.run_alembic_command(["heads"])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history_result = self.run_alembic_command(["history"])
        
        current_revision = None
        if current_result["success"] and current_result["stdout"]:
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ current
            lines = current_result["stdout"].strip().split('\n')
            for line in lines:
                if line.strip() and not line.startswith('INFO'):
                    current_revision = line.strip().split()[0] if line.strip() else None
                    break
        
        head_revision = None
        if head_result["success"] and head_result["stdout"]:
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ heads
            lines = head_result["stdout"].strip().split('\n')
            for line in lines:
                if line.strip() and not line.startswith('INFO'):
                    head_revision = line.strip().split()[0] if line.strip() else None
                    break
        
        return {
            "current_revision": current_revision,
            "head_revision": head_revision,
            "is_up_to_date": current_revision == head_revision,
            "current_output": current_result["stdout"],
            "head_output": head_result["stdout"],
            "history_output": history_result["stdout"] if history_result["success"] else None
        }
    
    def create_migration(self, message: str, autogenerate: bool = True) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        command = ["revision"]
        if autogenerate:
            command.append("--autogenerate")
        command.extend(["-m", message])
        
        result = self.run_alembic_command(command)
        return result
    
    def apply_migrations(self, revision: str = "head") -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
        result = self.run_alembic_command(["upgrade", revision])
        return result
    
    def rollback_migration(self, revision: str) -> Dict[str, Any]:
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        result = self.run_alembic_command(["downgrade", revision])
        return result
    
    def get_history(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π"""
        result = self.run_alembic_command(["history", "--verbose"])
        return result
    
    def initialize(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        result = self.run_alembic_command(["stamp", "head"])
        return result
    
    def validate_schema(self) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã"""
        try:
            from app.core.config import settings
            from sqlalchemy import create_engine, text
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
            sync_engine = create_engine(
                settings.DATABASE_URL.replace("+asyncpg", "")
            )
            
            with sync_engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã alembic_version
                result = conn.execute(text("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = 'alembic_version'
                    )
                """))
                
                has_alembic_table = result.scalar()
                
                return {
                    "valid": has_alembic_table,
                    "has_alembic_table": has_alembic_table,
                    "message": "–°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞" if has_alembic_table else "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
                }
                
        except Exception as e:
            return {
                "valid": False,
                "error": str(e),
                "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã"
            }
    
    def create_backup(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            from app.core.config import settings
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_dir = os.path.join(self.base_dir, "backups")
            os.makedirs(backup_dir, exist_ok=True)
            
            backup_file = os.path.join(backup_dir, f"backup_{timestamp}.sql")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ PostgreSQL
            cmd = [
                "pg_dump",
                "--host", settings.POSTGRESQL_HOST,
                "--port", str(settings.POSTGRESQL_PORT),
                "--username", settings.POSTGRESQL_USER,
                "--dbname", settings.POSTGRESQL_DBNAME,
                "--file", backup_file,
                "--verbose"
            ]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env["PGPASSWORD"] = settings.POSTGRESQL_PASSWORD
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                env=env
            )
            
            return {
                "success": result.returncode == 0,
                "backup_file": backup_file if result.returncode == 0 else None,
                "output": result.stdout,
                "error": result.stderr
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "backup_file": None
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
migration_manager = SimpleMigrationManager()


@click.group()
def cli():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pass


@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    status_data = migration_manager.get_status()
    
    click.echo(f"\nüìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
    click.echo(f"   –¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è: {status_data['current_revision'] or '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}")
    click.echo(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è: {status_data['head_revision'] or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    click.echo(f"   –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞' if status_data['is_up_to_date'] else '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}")
    
    if status_data['current_output']:
        click.echo(f"\nüìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        click.echo(f"   {status_data['current_output']}")
    
    if status_data['head_output']:
        click.echo(f"\nüîù –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è:")
        click.echo(f"   {status_data['head_output']}")


@cli.command()
def validate():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    click.echo("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    validation_result = migration_manager.validate_schema()
    
    if validation_result['valid']:
        click.echo(f"‚úÖ {validation_result['message']}")
    else:
        click.echo(f"‚ùå {validation_result['message']}")
        if 'error' in validation_result:
            click.echo(f"   –û—à–∏–±–∫–∞: {validation_result['error']}")


@cli.command()
def init():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    result = migration_manager.initialize()
    
    if result['success']:
        click.echo(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        click.echo(f"   –í—ã–≤–æ–¥: {result['stdout']}")
    else:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result['stderr']}")


@cli.command()
@click.argument('message')
@click.option('--autogenerate/--no-autogenerate', default=True, help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏')
def create(message: str, autogenerate: bool):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    click.echo(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {message}")
    
    result = migration_manager.create_migration(message, autogenerate)
    
    if result['success']:
        click.echo(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        click.echo(f"   –í—ã–≤–æ–¥: {result['stdout']}")
    else:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {result['stderr']}")


@cli.command()
@click.option('--revision', default='head', help='–†–µ–≤–∏–∑–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è')
@click.option('--backup/--no-backup', default=True, help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
def apply(revision: str, backup: bool):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    click.echo(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —Ä–µ–≤–∏–∑–∏–∏: {revision}")
    
    if backup:
        click.echo("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        backup_result = migration_manager.create_backup()
        if backup_result['success']:
            click.echo(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_result['backup_file']}")
        else:
            click.echo(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_result['error']}")
    
    result = migration_manager.apply_migrations(revision)
    
    if result['success']:
        click.echo(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        click.echo(f"   –í—ã–≤–æ–¥: {result['stdout']}")
    else:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {result['stderr']}")


@cli.command()
@click.argument('revision')
@click.option('--backup/--no-backup', default=True, help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
def rollback(revision: str, backup: bool):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
    click.echo(f"‚è™ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ —Ä–µ–≤–∏–∑–∏–∏: {revision}")
    
    if not click.confirm(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ {revision}?"):
        click.echo("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return
    
    if backup:
        click.echo("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        backup_result = migration_manager.create_backup()
        if backup_result['success']:
            click.echo(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_result['backup_file']}")
        else:
            click.echo(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_result['error']}")
    
    result = migration_manager.rollback_migration(revision)
    
    if result['success']:
        click.echo(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        click.echo(f"   –í—ã–≤–æ–¥: {result['stdout']}")
    else:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {result['stderr']}")


@cli.command()
def history():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo("üìú –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:")
    
    result = migration_manager.get_history()
    
    if result['success']:
        click.echo(result['stdout'])
    else:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {result['stderr']}")


@cli.command()
def backup():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    click.echo("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    result = migration_manager.create_backup()
    
    if result['success']:
        click.echo(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result['backup_file']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if result['backup_file'] and os.path.exists(result['backup_file']):
            size_mb = os.path.getsize(result['backup_file']) / (1024 * 1024)
            click.echo(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")
    else:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {result['error']}")


@cli.command()
def check():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã
    click.echo("\n1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    validation_result = migration_manager.validate_schema()
    
    if validation_result['valid']:
        click.echo(f"   ‚úÖ {validation_result['message']}")
    else:
        click.echo(f"   ‚ùå {validation_result['message']}")
        if 'error' in validation_result:
            click.echo(f"      –û—à–∏–±–∫–∞: {validation_result['error']}")
    
    # –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
    click.echo("\n2. –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
    status_data = migration_manager.get_status()
    
    click.echo(f"   –¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è: {status_data['current_revision'] or '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}")
    click.echo(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è: {status_data['head_revision'] or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    if status_data['is_up_to_date']:
        click.echo("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞")
    else:
        click.echo("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")
        
        if click.confirm("\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏?"):
            click.echo("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_result = migration_manager.create_backup()
            if backup_result['success']:
                click.echo(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_result['backup_file']}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            apply_result = migration_manager.apply_migrations()
            if apply_result['success']:
                click.echo("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {apply_result['stderr']}")
    
    click.echo("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == '__main__':
    cli() 