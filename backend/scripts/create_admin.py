#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é app
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from passlib.context import CryptContext
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy import select
from app.core.models import Administrator, Role
from app.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_password_hash(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return pwd_context.hash(password)


async def create_administrator():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    engine = create_async_engine(settings.DATABASE_URL)
    
    async with engine.begin() as conn:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        async_session = AsyncSession(conn)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–æ–ª—å admin
            result = await async_session.execute(select(Role).where(Role.name == "admin"))
            admin_role = result.scalar_one_or_none()
            
            if not admin_role:
                print("‚ùå –†–æ–ª—å 'admin' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ roles!")
                print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await async_session.execute(select(Administrator).where(Administrator.login == "admin"))
            existing_admin = result.scalar_one_or_none()
            
            if existing_admin:
                print("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ª–æ–≥–∏–Ω–æ–º 'admin' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_password = os.getenv("ADMIN_PASSWORD", "CHANGE_ME_NOW")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            hashed_password = get_password_hash(admin_password)
            
            new_admin = Administrator(
                name="–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                role_id=admin_role.id,
                status="active",
                login="admin",
                password_hash=hashed_password,
                notes="–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç"
            )
            
            async_session.add(new_admin)
            await async_session.commit()
            
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìã –õ–æ–≥–∏–Ω: admin")
            print(f"üîë –ü–∞—Ä–æ–ª—å: {admin_password}")
            print(f"üë§ –ò–º—è: {new_admin.name}")
            print(f"üîê –†–æ–ª—å: admin")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {new_admin.status}")
            print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await async_session.rollback()
        finally:
            await async_session.close()
    
    await engine.dispose()


if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    asyncio.run(create_administrator()) 