#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç N+1 –∑–∞–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã
"""
import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import engine
from app.core.cache import init_cache, cache_manager
from app.database_indexes_v2 import full_database_optimization
from app.core.optimized_crud_v2 import OptimizedCRUDv2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('performance_optimization.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import subprocess
        import sys
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        dependencies = [
            "redis==5.0.1",
            "aioredis==2.0.1", 
            "aiocache==0.12.2",
            "asyncio-throttle==1.0.2",
            "cachetools==5.3.2",
            "memory-profiler==0.61.0",
            "line-profiler==4.1.1"
        ]
        
        for dep in dependencies:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {dep}")
            except subprocess.CalledProcessError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {dep}: {e}")
        
        logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")

async def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à
        await init_cache()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
        stats = cache_manager.get_stats()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {stats}")
        
        if stats["redis_connected"]:
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è  Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à")
        
        return stats["redis_connected"]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}")
        return False

async def optimize_database_performance():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        await full_database_optimization()
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

async def warm_up_cache():
    """–ü—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞"""
    logger.info("–ü—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞...")
    
    try:
        from app.core.database import AsyncSessionLocal
        
        async with AsyncSessionLocal() as db:
            await OptimizedCRUDv2.warm_up_cache(db)
        
        logger.info("‚úÖ –ö–µ—à –ø—Ä–æ–≥—Ä–µ—Ç —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫–µ—à–∞: {e}")

async def run_performance_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        from app.core.database import AsyncSessionLocal
        import time
        
        async with AsyncSessionLocal() as db:
            # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            from sqlalchemy import text
            start_time = time.time()
            requests_old = await db.execute(
                text("SELECT * FROM requests ORDER BY created_at DESC LIMIT 100")
            )
            old_time = time.time() - start_time
            
            # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            start_time = time.time()
            requests_new = await OptimizedCRUDv2.get_requests_optimized(db, limit=100)
            new_time = time.time() - start_time
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            improvement = ((old_time - new_time) / old_time * 100) if old_time > 0 else 0
            
            logger.info(f"–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:")
            logger.info(f"  –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {old_time:.3f}—Å")
            logger.info(f"  –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π: {new_time:.3f}—Å")
            logger.info(f"  –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
            
            # –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            start_time = time.time()
            cities_1 = await OptimizedCRUDv2.get_cities_cached(db)
            cache_miss_time = time.time() - start_time
            
            start_time = time.time()
            cities_2 = await OptimizedCRUDv2.get_cities_cached(db)
            cache_hit_time = time.time() - start_time
            
            cache_improvement = ((cache_miss_time - cache_hit_time) / cache_miss_time * 100) if cache_miss_time > 0 else 0
            
            logger.info(f"–¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:")
            logger.info(f"  Cache miss: {cache_miss_time:.3f}—Å")
            logger.info(f"  Cache hit: {cache_hit_time:.3f}—Å")
            logger.info(f"  –£–ª—É—á—à–µ–Ω–∏–µ: {cache_improvement:.1f}%")
        
        logger.info("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

async def generate_performance_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        report = {
            "timestamp": datetime.now().isoformat(),
            "optimizations_applied": [
                "–°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ N+1 –∑–∞–ø—Ä–æ—Å–æ–≤",
                "–î–æ–±–∞–≤–ª–µ–Ω–æ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã SQL –∑–∞–ø—Ä–æ—Å—ã —Å joinedload/selectinload",
                "–°–æ–∑–¥–∞–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
                "–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã PostgreSQL",
                "–î–æ–±–∞–≤–ª–µ–Ω—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            ],
            "cache_stats": cache_manager.get_stats(),
            "recommendations": [
                "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
                "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞",
                "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ pg_stat_statements",
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ connection pooling –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("performance_optimization_report.json", "w", encoding="utf-8") as f:
            import json
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ performance_optimization_report.json")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\n" + "="*60)
        print("–û–¢–ß–ï–¢ –û–ë –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*60)
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['timestamp']}")
        print(f"–ö–µ—à –ø–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if report['cache_stats']['redis_connected'] else '‚ùå'}")
        print(f"–ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: {report['cache_stats']['hit_rate']}%")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–µ—à—É: {report['cache_stats']['total_requests']}")
        print("\n–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        for opt in report['optimizations_applied']:
            print(f"  ‚úÖ {opt}")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in report['recommendations']:
            print(f"  üí° {rec}")
        print("="*60)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    try:
        # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        await install_dependencies()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        redis_connected = await check_redis_connection()
        
        # 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await optimize_database_performance()
        
        # 4. –ü—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞
        if redis_connected:
            await warm_up_cache()
        
        # 5. –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await run_performance_tests()
        
        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        await generate_performance_report()
        
        logger.info("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if cache_manager:
            await cache_manager.close()
        if engine:
            await engine.dispose()

if __name__ == "__main__":
    asyncio.run(main()) 