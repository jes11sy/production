#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è API —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ API —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import asyncio
import httpx
import json
from datetime import datetime, date
from typing import Dict, Any, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class ApiDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.client = httpx.AsyncClient(timeout=30.0)
        self.auth_token = None
        
    async def __aenter__(self):
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.client.aclose()
    
    def print_section(self, title: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
        print(f"\n{'='*60}")
        print(f"üî• {title}")
        print(f"{'='*60}")
    
    def print_request(self, method: str, url: str, data: Optional[Dict] = None):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ"""
        print(f"\nüì° {method} {url}")
        if data:
            print(f"üìã Data: {json.dumps(data, indent=2, ensure_ascii=False)}")
    
    def print_response(self, response: httpx.Response):
        """–ü–µ—á–∞—Ç—å –æ—Ç–≤–µ—Ç–∞"""
        status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
        print(f"{status_emoji} Status: {response.status_code}")
        try:
            response_data = response.json()
            print(f"üìÑ Response: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
        except (ValueError, json.JSONDecodeError) as e:
            print(f"üìÑ Response (non-JSON): {response.text}")
    
    async def demo_health_check(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        self.print_section("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´")
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüè• –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        url = f"{self.base_url}/health"
        self.print_request("GET", url)
        
        response = await self.client.get(url)
        self.print_response(response)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        if self.auth_token:
            print("\nüî¨ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
            url = f"{self.base_url}/api/v1/health/detailed"
            self.print_request("GET", url)
            
            response = await self.client.get(
                url,
                headers={"Authorization": f"Bearer {self.auth_token}"}
            )
            self.print_response(response)
    
    async def demo_authentication(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.print_section("–ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø")
        
        # –ü—Ä–∏–º–µ—Ä—ã —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        credentials_examples = [
            {
                "name": "–ú–∞—Å—Ç–µ—Ä",
                "login": "master001",
                "password": "password123"
            },
            {
                "name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞",
                "login": "callcenter_user",
                "password": "employee_pass456"
            },
            {
                "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "login": "admin",
                "password": "admin_secure789"
            }
        ]
        
        for cred in credentials_examples:
            print(f"\nüë§ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {cred['name']}")
            url = f"{self.base_url}/api/v1/auth/login"
            data = {
                "login": cred["login"],
                "password": cred["password"]
            }
            
            self.print_request("POST", url, data)
            
            response = await self.client.post(url, json=data)
            self.print_response(response)
            
            if response.status_code == 200:
                response_data = response.json()
                self.auth_token = response_data.get("access_token")
                print(f"üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                me_url = f"{self.base_url}/api/v1/auth/me"
                self.print_request("GET", me_url)
                
                me_response = await self.client.get(
                    me_url,
                    headers={"Authorization": f"Bearer {self.auth_token}"}
                )
                self.print_response(me_response)
                break
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")
    
    async def demo_requests_api(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –∑–∞—è–≤–æ–∫"""
        if not self.auth_token:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API –∑–∞—è–≤–æ–∫")
            return
            
        self.print_section("API –ó–ê–Ø–í–û–ö")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ì–æ—Ä–æ–¥–∞
        cities_url = f"{self.base_url}/api/v1/requests/cities/"
        self.print_request("GET", cities_url)
        cities_response = await self.client.get(cities_url, headers=headers)
        self.print_response(cities_response)
        
        # –¢–∏–ø—ã –∑–∞—è–≤–æ–∫
        types_url = f"{self.base_url}/api/v1/requests/request-types/"
        self.print_request("GET", types_url)
        types_response = await self.client.get(types_url, headers=headers)
        self.print_response(types_response)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏")
        create_url = f"{self.base_url}/api/v1/requests/"
        
        # –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞—è–≤–∫–∏
        full_request_data = {
            "city_id": 1,
            "request_type_id": 1,
            "client_phone": "+7 (999) 123-45-67",
            "client_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123, –∫–≤. 45",
            "meeting_date": "2025-01-20T14:30:00",
            "direction_id": 1,
            "problem": "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            "status": "new",
            "advertising_campaign_id": 1,
            "ats_number": "ATS-2025-001",
            "call_center_name": "–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞",
            "call_center_notes": "–ö–ª–∏–µ–Ω—Ç –æ—á–µ–Ω—å –≤–µ–∂–ª–∏–≤—ã–π, –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –ø–æ—Å–ª–µ 15:00"
        }
        
        self.print_request("POST", create_url, full_request_data)
        create_response = await self.client.post(create_url, json=full_request_data, headers=headers)
        self.print_response(create_response)
        
        request_id = None
        if create_response.status_code == 200:
            request_id = create_response.json().get("id")
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {request_id}")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞—è–≤–∫–∏
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—è–≤–∫–∏")
        minimal_request_data = {
            "city_id": 1,
            "request_type_id": 2,
            "client_phone": "+7 (999) 987-65-43",
            "client_name": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä"
        }
        
        self.print_request("POST", create_url, minimal_request_data)
        minimal_response = await self.client.post(create_url, json=minimal_request_data, headers=headers)
        self.print_response(minimal_response)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")
        list_url = f"{self.base_url}/api/v1/requests/?skip=0&limit=10"
        self.print_request("GET", list_url)
        list_response = await self.client.get(list_url, headers=headers)
        self.print_response(list_response)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
        if request_id:
            print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}")
            get_url = f"{self.base_url}/api/v1/requests/{request_id}"
            self.print_request("GET", get_url)
            get_response = await self.client.get(get_url, headers=headers)
            self.print_response(get_response)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            print(f"\n‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}")
            update_url = f"{self.base_url}/api/v1/requests/{request_id}"
            update_data = {
                "status": "in_progress",
                "master_notes": "–ù–∞—á–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞",
                "master_id": 1
            }
            
            self.print_request("PUT", update_url, update_data)
            update_response = await self.client.put(update_url, json=update_data, headers=headers)
            self.print_response(update_response)
    
    async def demo_transactions_api(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if not self.auth_token:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return
            
        self.print_section("API –¢–†–ê–ù–ó–ê–ö–¶–ò–ô")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        print("\nüí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä–∞—Å—Ö–æ–¥)")
        create_url = f"{self.base_url}/api/v1/transactions/"
        
        expense_data = {
            "city_id": 1,
            "transaction_type_id": 1,
            "amount": 15000.50,
            "notes": "–ó–∞–∫—É–ø–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤",
            "specified_date": "2025-01-15",
            "payment_reason": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #123"
        }
        
        self.print_request("POST", create_url, expense_data)
        create_response = await self.client.post(create_url, json=expense_data, headers=headers)
        self.print_response(create_response)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        print("\nüíº –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞—Ä–ø–ª–∞—Ç–∞)")
        salary_data = {
            "city_id": 1,
            "transaction_type_id": 2,
            "amount": 5000.00,
            "notes": "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞",
            "specified_date": "2025-01-15",
            "payment_reason": "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞"
        }
        
        self.print_request("POST", create_url, salary_data)
        salary_response = await self.client.post(create_url, json=salary_data, headers=headers)
        self.print_response(salary_response)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        list_url = f"{self.base_url}/api/v1/transactions/?skip=0&limit=10"
        self.print_request("GET", list_url)
        list_response = await self.client.get(list_url, headers=headers)
        self.print_response(list_response)
    
    async def demo_users_api(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.auth_token:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
            
        self.print_section("API –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
        print("\nüë®‚Äçüîß –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤")
        masters_url = f"{self.base_url}/api/v1/users/masters/"
        self.print_request("GET", masters_url)
        masters_response = await self.client.get(masters_url, headers=headers)
        self.print_response(masters_response)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
        print("\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞")
        create_master_url = f"{self.base_url}/api/v1/users/masters/"
        master_data = {
            "city_id": 1,
            "full_name": "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
            "phone_number": "+7 (999) 555-12-34",
            "birth_date": "1985-03-15",
            "passport": "4510 123456",
            "login": f"master_demo_{datetime.now().strftime('%H%M%S')}",
            "password": "secure_pass123",
            "chat_id": "telegram_123456789",
            "notes": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã, —Å—Ç–∞–∂ 8 –ª–µ—Ç"
        }
        
        self.print_request("POST", create_master_url, master_data)
        create_master_response = await self.client.post(create_master_url, json=master_data, headers=headers)
        self.print_response(create_master_response)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        print("\nüë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        employees_url = f"{self.base_url}/api/v1/users/employees/"
        self.print_request("GET", employees_url)
        employees_response = await self.client.get(employees_url, headers=headers)
        self.print_response(employees_response)
    
    async def demo_database_api(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.auth_token:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
            
        self.print_section("API –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        headers = {"Authorization": f"Bearer {self.auth_token}"}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        stats_url = f"{self.base_url}/api/v1/database/statistics"
        self.print_request("GET", stats_url)
        stats_response = await self.client.get(stats_url, headers=headers)
        self.print_response(stats_response)
        
        # –û—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print("\nüîß –û—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        report_url = f"{self.base_url}/api/v1/database/optimization-report"
        self.print_request("GET", report_url)
        report_response = await self.client.get(report_url, headers=headers)
        self.print_response(report_response)
    
    async def demo_error_handling(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.print_section("–û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö")
        
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        print("\nüö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        url = f"{self.base_url}/api/v1/requests/"
        self.print_request("GET", url)
        response = await self.client.get(url)
        self.print_response(response)
        
        # –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüîê –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        auth_url = f"{self.base_url}/api/v1/auth/login"
        wrong_data = {
            "login": "wrong_user",
            "password": "wrong_password"
        }
        self.print_request("POST", auth_url, wrong_data)
        wrong_response = await self.client.post(auth_url, json=wrong_data)
        self.print_response(wrong_response)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        if self.auth_token:
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            create_url = f"{self.base_url}/api/v1/requests/"
            invalid_data = {
                "client_phone": "–æ—á–µ–Ω—å_–¥–ª–∏–Ω–Ω—ã–π_–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞_–∫–æ—Ç–æ—Ä—ã–π_–ø—Ä–µ–≤—ã—à–∞–µ—Ç_–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é_–¥–ª–∏–Ω—É",
                "client_name": "–¢–µ—Å—Ç"
                # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ city_id
            }
            self.print_request("POST", create_url, invalid_data)
            invalid_response = await self.client.post(create_url, json=invalid_data, headers=headers)
            self.print_response(invalid_response)
        
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å
        print("\nüîç –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å")
        if self.auth_token:
            headers = {"Authorization": f"Bearer {self.auth_token}"}
            notfound_url = f"{self.base_url}/api/v1/requests/99999"
            self.print_request("GET", notfound_url)
            notfound_response = await self.client.get(notfound_url, headers=headers)
            self.print_response(notfound_response)
    
    async def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–ú–ò")
        print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {self.base_url}")
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            await self.demo_health_check()
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            await self.demo_authentication()
            
            # API –∑–∞—è–≤–æ–∫
            await self.demo_requests_api()
            
            # API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await self.demo_transactions_api()
            
            # API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.demo_users_api()
            
            # API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.demo_database_api()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            await self.demo_error_handling()
            
            self.print_section("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
            print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            print("üìñ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ:")
            print(f"   üîó Swagger UI: {self.base_url}/docs")
            print(f"   üîó ReDoc: {self.base_url}/redoc")
            print(f"   üîó OpenAPI Schema: {self.base_url}/openapi.json")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏")
    parser.add_argument("--url", default="http://localhost:8000", help="–ë–∞–∑–æ–≤—ã–π URL API")
    parser.add_argument("--section", choices=[
        "health", "auth", "requests", "transactions", "users", "database", "errors", "all"
    ], default="all", help="–ö–∞–∫—É—é —Å–µ–∫—Ü–∏—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å")
    
    args = parser.parse_args()
    
    async with ApiDemo(args.url) as demo:
        if args.section == "all":
            await demo.run_full_demo()
        elif args.section == "health":
            await demo.demo_health_check()
        elif args.section == "auth":
            await demo.demo_authentication()
        elif args.section == "requests":
            await demo.demo_authentication()
            await demo.demo_requests_api()
        elif args.section == "transactions":
            await demo.demo_authentication()
            await demo.demo_transactions_api()
        elif args.section == "users":
            await demo.demo_authentication()
            await demo.demo_users_api()
        elif args.section == "database":
            await demo.demo_authentication()
            await demo.demo_database_api()
        elif args.section == "errors":
            await demo.demo_authentication()
            await demo.demo_error_handling()


if __name__ == "__main__":
    asyncio.run(main()) 