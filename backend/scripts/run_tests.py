#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
"""
import os
import sys
import subprocess
import argparse
from pathlib import Path
from app.utils.subprocess_security import safe_subprocess_run, SubprocessSecurityError


def run_command(cmd, description=""):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print("-" * 60)
    
    try:
        result = safe_subprocess_run(cmd, check=True)
        print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return False


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è backend")
    parser.add_argument("--unit", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã")
    parser.add_argument("--integration", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã")
    parser.add_argument("--auth", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    parser.add_argument("--api", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã API")
    parser.add_argument("--models", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π")
    parser.add_argument("--coverage", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--parallel", "-p", action="store_true", help="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--file", "-f", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--install-deps", action="store_true", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    args = parser.parse_args()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend
    backend_dir = Path(__file__).parent
    os.chdir(backend_dir)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.install_deps:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        if not run_command([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                          "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
            return 1
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ pytest
    cmd = [sys.executable, "-m", "pytest"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if args.coverage:
        cmd.extend([
            "--cov=app",
            "--cov-report=term-missing",
            "--cov-report=html:htmlcov",
            "--cov-report=xml",
            "--cov-fail-under=70"
        ])
    
    if args.verbose:
        cmd.append("-v")
    
    if args.parallel:
        cmd.extend(["-n", "auto"])  # –¢—Ä–µ–±—É–µ—Ç pytest-xdist
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
    if args.unit:
        cmd.extend(["-m", "unit"])
    elif args.integration:
        cmd.extend(["-m", "integration"])
    elif args.auth:
        cmd.extend(["-m", "auth"])
    elif args.api:
        cmd.extend(["-m", "api"])
    elif args.models:
        cmd.extend(["-m", "models"])
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
    if args.file:
        cmd.append(f"tests/{args.file}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω
        if args.coverage and os.path.exists("htmlcov/index.html"):
            print(f"\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞: {os.path.abspath('htmlcov/index.html')}")
        
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 