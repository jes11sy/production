#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os
from typing import Optional
import click
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.migrations import (
    migration_manager,
    check_migration_status,
    apply_pending_migrations,
    create_new_migration,
    validate_schema,
    initialize_migration_system
)


@click.group()
def cli():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pass


@cli.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        status_data = migration_manager.get_migration_status()
        
        click.echo(f"\nüìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        click.echo(f"   –¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è: {status_data['current_revision'] or '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}")
        click.echo(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è: {status_data['head_revision'] or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        click.echo(f"   –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞' if status_data['is_up_to_date'] else '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}")
        click.echo(f"   –ù–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π: {status_data['pending_count']}")
        click.echo(f"   –í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: {status_data['total_migrations']}")
        
        if status_data['pending_migrations']:
            click.echo(f"\n‚è≥ –ù–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in status_data['pending_migrations']:
                click.echo(f"   - {migration}")
        
        if status_data['history']:
            click.echo(f"\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in status_data['history'][:5]:
                click.echo(f"   - {migration['revision']}: {migration['doc'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", err=True)
        sys.exit(1)


@cli.command()
def validate():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    click.echo("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        validation_result = migration_manager.validate_database_schema()
        
        if validation_result['valid']:
            click.echo(f"‚úÖ {validation_result['message']}")
            click.echo(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {validation_result['tables_count']}")
            click.echo(f"   –¢–∞–±–ª–∏—Ü–∞ alembic_version: {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if validation_result['has_alembic_table'] else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        else:
            click.echo(f"‚ùå {validation_result['error']}")
            
            if 'missing_tables' in validation_result:
                click.echo(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(validation_result['missing_tables'])}")
            
            if 'suggestions' in validation_result:
                click.echo(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for suggestion in validation_result['suggestions']:
                    click.echo(f"   - {suggestion}")
    
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
def init():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        result = migration_manager.initialize_migrations()
        click.echo(f"‚úÖ {result}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.argument('message')
@click.option('--autogenerate/--no-autogenerate', default=True, help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏')
def create(message: str, autogenerate: bool):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    click.echo(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {message}")
    
    try:
        result = migration_manager.create_migration(message, autogenerate)
        click.echo(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        click.echo(f"–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n{result}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--revision', default='head', help='–†–µ–≤–∏–∑–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: head)')
@click.option('--backup/--no-backup', default=True, help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º')
def apply(revision: str, backup: bool):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    click.echo(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ —Ä–µ–≤–∏–∑–∏–∏: {revision}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_data = migration_manager.get_migration_status()
        
        if status_data['is_up_to_date'] and revision == 'head':
            click.echo("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            return
        
        if backup:
            click.echo("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            backup_file = migration_manager.backup_database()
            click.echo(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        
        click.echo("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        result = migration_manager.apply_migrations(revision)
        
        click.echo(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        click.echo(f"–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n{result}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.argument('revision')
@click.option('--backup/--no-backup', default=True, help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º')
def rollback(revision: str, backup: bool):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
    click.echo(f"‚è™ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ —Ä–µ–≤–∏–∑–∏–∏: {revision}")
    
    if not click.confirm(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ {revision}?"):
        click.echo("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return
    
    try:
        if backup:
            click.echo("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            backup_file = migration_manager.backup_database()
            click.echo(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        
        click.echo("‚è™ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
        result = migration_manager.rollback_migration(revision)
        
        click.echo(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        click.echo(f"–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:\n{result}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--limit', default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞')
def history(limit: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo(f"üìú –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit}):")
    
    try:
        history_data = migration_manager.get_migration_history()
        
        if not history_data:
            click.echo("   –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for i, migration in enumerate(history_data[:limit], 1):
            click.echo(f"   {i}. {migration['revision']}")
            click.echo(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {migration['doc'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
            click.echo(f"      –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è: {migration['down_revision'] or '–ö–æ—Ä–Ω–µ–≤–∞—è'}")
            click.echo(f"      –§–∞–π–ª: {os.path.basename(migration['path']) if migration['path'] else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
            click.echo()
        
        if len(history_data) > limit:
            click.echo(f"   ... –∏ –µ—â—ë {len(history_data) - limit} –º–∏–≥—Ä–∞—Ü–∏–π")
    
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
def pending():
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    click.echo("‚è≥ –ù–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
    
    try:
        pending_migrations = migration_manager.get_pending_migrations()
        
        if not pending_migrations:
            click.echo("   –ù–µ—Ç –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π")
            return
        
        for i, migration in enumerate(pending_migrations, 1):
            click.echo(f"   {i}. {migration}")
    
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π: {e}", err=True)
        sys.exit(1)


@cli.command()
def backup():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    click.echo("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        backup_file = migration_manager.backup_database()
        click.echo(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(backup_file):
            size_mb = os.path.getsize(backup_file) / (1024 * 1024)
            click.echo(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
def current():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é"""
    click.echo("üîç –¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    try:
        current_revision = migration_manager.get_current_revision()
        head_revision = migration_manager.get_head_revision()
        
        click.echo(f"   –¢–µ–∫—É—â–∞—è: {current_revision or '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}")
        click.echo(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è: {head_revision or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        
        if current_revision and head_revision:
            if current_revision == head_revision:
                click.echo("   –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞")
            else:
                click.echo("   –°—Ç–∞—Ç—É—Å: ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≤–∏–∑–∏–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--auto-apply/--no-auto-apply', default=False, help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏')
def check(auto_apply: bool):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    click.echo("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã
        click.echo("\n1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        validation_result = migration_manager.validate_database_schema()
        
        if validation_result['valid']:
            click.echo(f"   ‚úÖ {validation_result['message']}")
        else:
            click.echo(f"   ‚ùå {validation_result['error']}")
            if validation_result.get('suggestions'):
                for suggestion in validation_result['suggestions']:
                    click.echo(f"      üí° {suggestion}")
        
        # –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
        click.echo("\n2. –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        status_data = migration_manager.get_migration_status()
        
        click.echo(f"   –¢–µ–∫—É—â–∞—è —Ä–µ–≤–∏–∑–∏—è: {status_data['current_revision'] or '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}")
        click.echo(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è: {status_data['head_revision'] or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        click.echo(f"   –ù–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π: {status_data['pending_count']}")
        
        if status_data['is_up_to_date']:
            click.echo("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        else:
            click.echo("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")
            
            if status_data['pending_migrations']:
                click.echo("   –ù–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
                for migration in status_data['pending_migrations']:
                    click.echo(f"      - {migration}")
                
                if click.confirm("\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏?") or auto_apply:
                    click.echo("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_file = migration_manager.backup_database()
                    click.echo(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
                    result = migration_manager.apply_migrations()
                    click.echo("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        click.echo("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", err=True)
        sys.exit(1)


if __name__ == '__main__':
    cli() 