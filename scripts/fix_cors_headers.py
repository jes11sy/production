#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è hardcoded CORS headers –≤ API —Ñ–∞–π–ª–∞—Ö backend
–ó–∞–º–µ–Ω—è–µ—Ç localhost:3000 –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cors_utils
"""

import os
import re
import sys
from pathlib import Path

def add_cors_import(file_content: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç cors_utils –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if "from ..core.cors_utils import" in file_content:
        return file_content
    
    # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö imports)
    lines = file_content.split('\n')
    insert_index = 0
    
    for i, line in enumerate(lines):
        if line.startswith('from ..core.') and 'cors_utils' not in line:
            insert_index = i + 1
        elif line.startswith('router = ') or line.startswith('@router'):
            break
    
    lines.insert(insert_index, "from ..core.cors_utils import create_cors_response, get_cors_headers")
    return '\n'.join(lines)

def replace_simple_jsonresponse_cors(content: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ JSONResponse —Å CORS headers –Ω–∞ create_cors_response"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö OPTIONS handlers
    pattern = r'return JSONResponse\(\s*content=\{\},\s*headers=\{\s*"Access-Control-Allow-Origin": "http://localhost:3000",\s*"Access-Control-Allow-Methods": "([^"]+)",\s*"Access-Control-Allow-Headers": "[^"]+",\s*"Access-Control-Allow-Credentials": "[^"]+",?\s*\}\s*\)'
    
    def replacement(match):
        methods = match.group(1)
        return f'return create_cors_response(allowed_methods="{methods}")'
    
    return re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)

def replace_jsonresponse_with_content(content: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç JSONResponse —Å content –∏ CORS headers"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è JSONResponse —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    pattern = r'return JSONResponse\(\s*content=([^,]+),\s*headers=\{\s*"Access-Control-Allow-Origin": "http://localhost:3000",\s*"Access-Control-Allow-Methods": "([^"]+)",\s*"Access-Control-Allow-Headers": "[^"]+",\s*"Access-Control-Allow-Credentials": "[^"]+",?\s*\}\s*\)'
    
    def replacement(match):
        content_part = match.group(1)
        methods = match.group(2)
        return f'cors_headers = get_cors_headers("{methods}")\n    return JSONResponse(content={content_part}, headers=cors_headers)'
    
    return re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)

def replace_headers_assignment(content: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ CORS headers"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
    content = re.sub(
        r'response\.headers\["Access-Control-Allow-Origin"\] = "http://localhost:3000"',
        '# CORS headers will be set by middleware or cors_utils',
        content
    )
    
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ hardcoded CORS assignments
    content = re.sub(
        r'response\.headers\["Access-Control-Allow-[^"]+"\] = "[^"]*"[\s\n]*',
        '',
        content
    )
    
    return content

def fix_file(file_path: Path) -> bool:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç CORS headers –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        content = add_cors_import(content)
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã CORS headers
        content = replace_simple_jsonresponse_cors(content)
        content = replace_jsonresponse_with_content(content)
        content = replace_headers_assignment(content)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ Fixed CORS headers in {file_path}")
            return True
        else:
            print(f"‚ÑπÔ∏è  No changes needed in {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error processing {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ backend/app/api
    script_dir = Path(__file__).parent
    backend_dir = script_dir.parent / "backend"
    api_dir = backend_dir / "app" / "api"
    
    if not api_dir.exists():
        print(f"‚ùå API directory not found: {api_dir}")
        sys.exit(1)
    
    print("üîß Fixing CORS headers in API files...")
    
    # –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    api_files = [
        "auth.py",
        "users.py", 
        "requests.py",
        "transactions.py"
    ]
    
    fixed_count = 0
    
    for file_name in api_files:
        file_path = api_dir / file_name
        if file_path.exists():
            if fix_file(file_path):
                fixed_count += 1
        else:
            print(f"‚ö†Ô∏è  File not found: {file_path}")
    
    print(f"\n‚ú® Completed! Fixed {fixed_count} files")
    print("\nüîç Next steps:")
    print("1. Test the application to ensure CORS works correctly")
    print("2. Update any remaining hardcoded localhost references")
    print("3. Check frontend rspack.config.cjs for dev proxy settings")

if __name__ == "__main__":
    main() 