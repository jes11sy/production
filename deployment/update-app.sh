#!/bin/bash

# =========================================
# üîÑ –ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =========================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

PROJECT_DIR="/opt/leadschem"
BACKUP_DIR="/opt/leadschem/backups"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ
if [ ! -d "$PROJECT_DIR" ]; then
    error "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ $PROJECT_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

cd $PROJECT_DIR

log "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

# =========================================
# 1. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
# =========================================

pre_update_check() {
    log "üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
    if ! docker compose -f deployment/docker-compose.production.yml ps | grep -q "Up"; then
        error "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
    if ! curl -s -f https://lead-schem.ru/health > /dev/null; then
        warn "‚ö†Ô∏è  –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    AVAILABLE_SPACE=$(df /opt | awk 'NR==2 {print $4}')
    if [ "$AVAILABLE_SPACE" -lt 1048576 ]; then  # –ú–µ–Ω—å—à–µ 1GB
        warn "‚ö†Ô∏è  –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (< 1GB)"
    fi
    
    log "‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# =========================================
# 2. –°–û–ó–î–ê–ù–ò–ï BACKUP
# =========================================

create_backup() {
    log "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
    
    mkdir -p $BACKUP_DIR
    
    # Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    source $PROJECT_DIR/.env
    
    BACKUP_FILE="$BACKUP_DIR/pre_update_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    log "üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    PGPASSWORD="$POSTGRESQL_PASSWORD" pg_dump \
        -h "$POSTGRESQL_HOST" \
        -U "$POSTGRESQL_USER" \
        -d "$POSTGRESQL_DBNAME" \
        -f "$BACKUP_FILE"
    
    gzip "$BACKUP_FILE"
    log "‚úÖ Backup –ë–î —Å–æ–∑–¥–∞–Ω: ${BACKUP_FILE}.gz"
    
    # Backup media —Ñ–∞–π–ª–æ–≤
    log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ backup media —Ñ–∞–π–ª–æ–≤..."
    tar -czf "$BACKUP_DIR/media_backup_$(date +%Y%m%d_%H%M%S).tar.gz" -C /opt/leadschem media/ || warn "‚ö†Ô∏è  –û—à–∏–±–∫–∞ backup media —Ñ–∞–π–ª–æ–≤"
    
    # Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    log "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    cp $PROJECT_DIR/.env "$BACKUP_DIR/env_backup_$(date +%Y%m%d_%H%M%S)"
    
    log "‚úÖ Backup –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# =========================================
# 3. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–î–ê
# =========================================

update_code() {
    log "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
    CURRENT_COMMIT=$(git rev-parse HEAD)
    echo $CURRENT_COMMIT > "$BACKUP_DIR/last_commit_$(date +%Y%m%d_%H%M%S)"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
    git fetch origin
    git pull origin main
    
    NEW_COMMIT=$(git rev-parse HEAD)
    
    if [ "$CURRENT_COMMIT" == "$NEW_COMMIT" ]; then
        log "‚ÑπÔ∏è  –ö–æ–¥ —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω"
    else
        log "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —Å $CURRENT_COMMIT –Ω–∞ $NEW_COMMIT"
    fi
}

# =========================================
# 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
# =========================================

update_containers() {
    log "üê≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Dockerfile
    if git diff --name-only HEAD~1 HEAD | grep -E "(Dockerfile|requirements\.txt|package\.json)"; then
        log "üî® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker compose -f deployment/docker-compose.production.yml build --no-cache
    else
        log "‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–∑—ã"
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Rolling update - —Å–Ω–∞—á–∞–ª–∞ backend, –ø–æ—Ç–æ–º frontend
    docker compose -f deployment/docker-compose.production.yml up -d --no-deps backend
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ backend –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend..."
    sleep 15
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    for i in {1..12}; do
        if curl -s -f http://127.0.0.1:8000/health > /dev/null; then
            log "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω"
            break
        fi
        if [ $i -eq 12 ]; then
            error "‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
        fi
        sleep 5
    done
    
    # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º frontend
    docker compose -f deployment/docker-compose.production.yml up -d --no-deps frontend
    
    # –ñ–¥–µ–º frontend
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ frontend..."
    sleep 10
    
    log "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
}

# =========================================
# 5. –í–´–ü–û–õ–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô
# =========================================

run_migrations() {
    log "üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    if docker compose -f deployment/docker-compose.production.yml exec -T backend alembic current | grep -q "head"; then
        log "‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞"
    else
        log "üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
        docker compose -f deployment/docker-compose.production.yml exec -T backend alembic upgrade head
        log "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    fi
}

# =========================================
# 6. –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò
# =========================================

health_check() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 5
    
    # Backend
    if curl -s -f http://127.0.0.1:8000/health > /dev/null; then
        log "‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Frontend
    if curl -s -f http://127.0.0.1:3000 > /dev/null; then
        log "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # HTTPS —Å–∞–π—Ç
    if curl -s -f https://lead-schem.ru > /dev/null; then
        log "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    else
        warn "‚ö†Ô∏è  –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if curl -s -f https://lead-schem.ru/api/v1/health > /dev/null; then
        log "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        warn "‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    log "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# =========================================
# 7. –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –î–ê–ù–ù–´–•
# =========================================

cleanup() {
    log "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤
    docker image prune -f || warn "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö backup —Ñ–∞–π–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    find $BACKUP_DIR -name "*.gz" -type f -mtime +7 -delete || warn "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö backup"
    find $BACKUP_DIR -name "env_backup_*" -type f | head -n -5 | xargs rm -f || true
    find $BACKUP_DIR -name "last_commit_*" -type f | head -n -5 | xargs rm -f || true
    
    log "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# =========================================
# ROLLBACK –§–£–ù–ö–¶–ò–Ø
# =========================================

rollback() {
    error "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç..."
    
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
    LAST_COMMIT_FILE=$(ls -t $BACKUP_DIR/last_commit_* 2>/dev/null | head -1)
    if [ -f "$LAST_COMMIT_FILE" ]; then
        LAST_COMMIT=$(cat "$LAST_COMMIT_FILE")
        log "üîÑ –û—Ç–∫–∞—Ç –∫ –∫–æ–º–º–∏—Ç—É $LAST_COMMIT"
        git reset --hard $LAST_COMMIT
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        docker compose -f deployment/docker-compose.production.yml restart
        
        log "‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
    else
        error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ"
    fi
}

# =========================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =========================================

main() {
    log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Lead Schema..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ trap –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    trap rollback ERR
    
    case "$1" in
        --quick)
            log "‚ö° –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–±–µ–∑ backup)"
            update_code
            update_containers
            health_check
            ;;
        --migrations-only)
            log "üîß –¢–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–∏"
            run_migrations
            ;;
        --no-backup)
            log "üöÄ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ backup"
            pre_update_check
            update_code
            update_containers
            run_migrations
            health_check
            cleanup
            ;;
        *)
            log "üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å backup"
            pre_update_check
            create_backup
            update_code
            update_containers
            run_migrations
            health_check
            cleanup
            ;;
    esac
    
    # –û—Ç–∫–ª—é—á–∞–µ–º trap –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    trap - ERR
    
    echo ""
    log "üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
    echo ""
    info "üåê –°–∞–π—Ç: https://lead-schem.ru"
    info "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: https://lead-schem.ru/monitoring/"
    info "üìã API Docs: https://lead-schem.ru/docs"
    echo ""
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
    docker compose -f deployment/docker-compose.production.yml ps
}

# =========================================
# HELP
# =========================================

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  (–±–µ–∑ –æ–ø—Ü–∏–π)      –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å backup"
    echo "  --quick          –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ backup"
    echo "  --migrations-only –¢–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"
    echo "  --no-backup     –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ backup"
    echo "  --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                    # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "  $0 --quick          # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "  $0 --migrations-only # –¢–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–∏"
    exit 0
fi

# –ó–∞–ø—É—Å–∫
main "$1" 