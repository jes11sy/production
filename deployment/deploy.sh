#!/bin/bash
# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è lead-schem.ru
# –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 194.87.201.221

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç root
if [[ $EUID -ne 0 ]]; then
   error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç root"
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_DIR="/opt/leadschem"
REPOSITORY_URL="https://github.com/your-repo/leadschem.git"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
DOMAIN="lead-schem.ru"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ lead-schem.ru..."
log "üìç –°–µ—Ä–≤–µ—Ä: 194.87.201.221"
log "üåê –î–æ–º–µ–Ω: $DOMAIN"
log "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_DIR"

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
echo ""
echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
echo "1) –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä)"
echo "2) –¢–æ–ª—å–∫–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "3) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "4) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL"
echo "5) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "6) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
echo "7) –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "8) Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-8): " choice

case $choice in
    1)
        log "üîß –í—ã–±—Ä–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        FULL_INSTALL=true
        ;;
    2)
        log "üì¶ –í—ã–±—Ä–∞–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        DEPLOY_ONLY=true
        ;;
    3)
        log "üîÑ –í—ã–±—Ä–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        UPDATE_ONLY=true
        ;;
    4)
        log "üîí –í—ã–±—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL..."
        SSL_ONLY=true
        ;;
    5)
        log "‚ôªÔ∏è –í—ã–±—Ä–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        RESTART_ONLY=true
        ;;
    6)
        log "üìä –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
        STATUS_ONLY=true
        ;;
    7)
        log "üìã –í—ã–±—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
        LOGS_ONLY=true
        ;;
    8)
        log "üíæ –í—ã–±—Ä–∞–Ω backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        BACKUP_ONLY=true
        ;;
    *)
        error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        ;;
esac

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
full_install() {
    log "üîß –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–∞..."
    
    # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if [ -f "server-setup.sh" ]; then
        chmod +x server-setup.sh
        ./server-setup.sh
    else
        error "–§–∞–π–ª server-setup.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    log "‚úÖ –ë–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    log "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    if [ -d "$PROJECT_DIR" ]; then
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf $PROJECT_DIR
        else
            return 0
        fi
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∫–ª–æ–Ω–∏—Ä—É–µ–º
    mkdir -p $PROJECT_DIR
    cd $PROJECT_DIR
    
    # –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    if [ -d "/tmp/leadschem" ]; then
        log "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        cp -r /tmp/leadschem/* $PROJECT_DIR/
    else
        warn "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ $PROJECT_DIR"
        return 1
    fi
    
    chown -R leadschem:leadschem $PROJECT_DIR
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application() {
    log "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    cd $PROJECT_DIR
    
    # –°–±–æ—Ä–∫–∞ backend
    log "üêç –°–±–æ—Ä–∫–∞ backend..."
    cd backend
    docker build -f deployment/Dockerfile -t leadschem-backend .
    
    # –°–±–æ—Ä–∫–∞ frontend
    log "‚öõÔ∏è –°–±–æ—Ä–∫–∞ frontend..."
    cd ../frontend
    docker build -f Dockerfile.production -t leadschem-frontend \
        --build-arg VITE_API_URL=https://$DOMAIN/api/v1 .
    
    cd ..
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
deploy_application() {
    log "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    cd $PROJECT_DIR/deployment
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.production.yml down || true
    
    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.production.yml up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    docker-compose -f docker-compose.production.yml ps
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
setup_ssl() {
    log "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL..."
    
    if [ -f "$PROJECT_DIR/deployment/setup-ssl.sh" ]; then
        chmod +x $PROJECT_DIR/deployment/setup-ssl.sh
        $PROJECT_DIR/deployment/setup-ssl.sh
    else
        error "–§–∞–π–ª setup-ssl.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    echo ""
    echo "=== Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ==="
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    echo ""
    echo "=== Nginx —Å—Ç–∞—Ç—É—Å ==="
    systemctl status nginx --no-pager
    
    echo ""
    echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ==="
    if curl -s http://127.0.0.1:8000/api/v1/health > /dev/null; then
        log "‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warn "‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    if curl -s http://127.0.0.1:3000 > /dev/null; then
        log "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warn "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    if curl -s https://$DOMAIN > /dev/null; then
        log "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    else
        warn "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    fi
    
    echo ""
    echo "=== –†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã ==="
    df -h / | grep -v Filesystem
    free -h | grep Mem
    
    echo ""
    echo "=== –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ ==="
    tail -5 /var/log/nginx/lead-schem.ru.error.log 2>/dev/null || echo "–õ–æ–≥ –æ—à–∏–±–æ–∫ –ø—É—Å—Ç"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
view_logs() {
    log "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    echo "1) Backend API"
    echo "2) Frontend"
    echo "3) Nginx"
    echo "4) –í—Å–µ –ª–æ–≥–∏"
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): " log_choice
    
    case $log_choice in
        1)
            docker logs leadschem_backend --tail=50
            ;;
        2)
            docker logs leadschem_frontend --tail=50
            ;;
        3)
            tail -50 /var/log/nginx/lead-schem.ru.access.log
            ;;
        4)
            log "=== Backend ==="
            docker logs leadschem_backend --tail=20
            log "=== Frontend ==="
            docker logs leadschem_frontend --tail=20
            log "=== Nginx ==="
            tail -20 /var/log/nginx/lead-schem.ru.access.log
            ;;
        *)
            error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
restart_services() {
    log "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    cd $PROJECT_DIR/deployment
    docker-compose -f docker-compose.production.yml restart
    systemctl restart nginx
    
    log "‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
update_application() {
    log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
    cd $PROJECT_DIR
    git pull origin main || warn "Git pull failed"
    
    # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    build_application
    deploy_application
    
    log "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è backup
backup_database() {
    log "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    BACKUP_DIR="/opt/leadschem/backups"
    mkdir -p $BACKUP_DIR
    
    BACKUP_FILE="$BACKUP_DIR/leadschem_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    # Backup —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env)
    source /opt/leadschem/.env
    PGPASSWORD="$POSTGRESQL_PASSWORD" pg_dump \
        -h "$POSTGRESQL_HOST" \
        -U "$POSTGRESQL_USER" \
        -d "$POSTGRESQL_DBNAME" \
        -f "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        log "‚úÖ Backup —Å–æ–∑–¥–∞–Ω: $BACKUP_FILE"
        
        # –°–∂–∞—Ç–∏–µ backup
        gzip "$BACKUP_FILE"
        log "üì¶ Backup —Å–∂–∞—Ç: $BACKUP_FILE.gz"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö backup (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        find $BACKUP_DIR -name "*.sql.gz" -mtime +7 -delete
        log "üßπ –°—Ç–∞—Ä—ã–µ backup —É–¥–∞–ª–µ–Ω—ã"
    else
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    if [ "$FULL_INSTALL" = true ]; then
        full_install
        clone_repository
        build_application
        deploy_application
        setup_ssl
        check_status
    elif [ "$DEPLOY_ONLY" = true ]; then
        clone_repository
        build_application
        deploy_application
    elif [ "$UPDATE_ONLY" = true ]; then
        update_application
    elif [ "$SSL_ONLY" = true ]; then
        setup_ssl
    elif [ "$RESTART_ONLY" = true ]; then
        restart_services
    elif [ "$STATUS_ONLY" = true ]; then
        check_status
    elif [ "$LOGS_ONLY" = true ]; then
        view_logs
    elif [ "$BACKUP_ONLY" = true ]; then
        backup_database
    fi
    
    log "üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    
    if [ "$FULL_INSTALL" = true ] || [ "$DEPLOY_ONLY" = true ]; then
        echo ""
        log "üìã –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
        log "   üåê –°–∞–π—Ç: https://$DOMAIN"
        log "   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: https://$DOMAIN/monitoring"
        log "   üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://$DOMAIN/api/docs"
        log "   üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_DIR"
        log "   üìã –°—Ç–∞—Ç—É—Å: ./deploy.sh -> 6"
        log "   üìã –õ–æ–≥–∏: ./deploy.sh -> 7"
        echo ""
        log "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        log "   systemctl status leadschem    - –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        log "   systemctl restart leadschem   - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        log "   check-ssl                     - –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL"
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main 