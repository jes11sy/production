#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ LeadSchem Production
# =============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_step() { echo -e "${BLUE}üìã $1${NC}"; }
print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    services=("backend" "frontend" "redis" "prometheus" "grafana" "nginx-proxy")
    all_ok=true
    
    for service in "${services[@]}"; do
        if docker-compose -f docker-compose.production.yml ps "$service" 2>/dev/null | grep -q "Up"; then
            print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service –∑–∞–ø—É—â–µ–Ω"
        else
            print_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            all_ok=false
        fi
    done
    
    return $([[ "$all_ok" == "true" ]] && echo 0 || echo 1)
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints
check_endpoints() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints..."
    
    endpoints=(
        "http://localhost:8000/health|Backend Health Check"
        "http://localhost:8000/api/v1/health|API Health Check"
        "http://localhost:3000|Frontend"
        "http://localhost:9090/-/healthy|Prometheus Health"
        "http://localhost:3001/api/health|Grafana Health"
    )
    
    all_ok=true
    
    for endpoint in "${endpoints[@]}"; do
        IFS='|' read -r url description <<< "$endpoint"
        
        if curl -f -s --max-time 10 "$url" > /dev/null 2>&1; then
            print_success "$description –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            print_error "$description –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
            all_ok=false
        fi
    done
    
    return $([[ "$all_ok" == "true" ]] && echo 0 || echo 1)
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ backend
    if docker-compose -f docker-compose.production.yml exec -T backend python -c "
import asyncio
import sys
from app.core.database import get_db_session

async def test_db():
    try:
        async with get_db_session() as db:
            result = await db.execute('SELECT 1')
            print('Database connection OK')
            return True
    except Exception as e:
        print(f'Database error: {e}')
        return False

if asyncio.run(test_db()):
    sys.exit(0)
else:
    sys.exit(1)
" 2>/dev/null; then
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
        return 0
    else
        print_error "–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
check_redis() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
    
    if docker-compose -f docker-compose.production.yml exec -T redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
        print_success "Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        print_error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
    disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 90 ]; then
        print_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
    elif [ "$disk_usage" -gt 80 ]; then
        print_warning "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
    else
        print_success "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    memory_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    if [ "$memory_usage" -gt 90 ]; then
        print_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%"
    elif [ "$memory_usage" -gt 80 ]; then
        print_warning "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%"
    else
        print_success "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
    if (( $(echo "$cpu_usage > 90" | bc -l) )); then
        print_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${cpu_usage}%"
    elif (( $(echo "$cpu_usage > 80" | bc -l) )); then
        print_warning "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${cpu_usage}%"
    else
        print_success "–ó–∞–≥—Ä—É–∑–∫–∞ CPU: ${cpu_usage}%"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ backend –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    error_count=$(docker-compose -f docker-compose.production.yml logs --since=5m backend 2>/dev/null | grep -i "error\|exception\|critical" | wc -l)
    
    if [ "$error_count" -gt 10 ]; then
        print_error "–ù–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö backend –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç"
    elif [ "$error_count" -gt 0 ]; then
        print_warning "–ù–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö backend –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç"
    else
        print_success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    cert_path="/etc/letsencrypt/live/lead-schem.ru/fullchain.pem"
    
    if [ -f "$cert_path" ]; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        expiry_date=$(openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2)
        expiry_timestamp=$(date -d "$expiry_date" +%s)
        current_timestamp=$(date +%s)
        days_left=$(( (expiry_timestamp - current_timestamp) / 86400 ))
        
        if [ "$days_left" -lt 7 ]; then
            print_error "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π!"
        elif [ "$days_left" -lt 30 ]; then
            print_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_left –¥–Ω–µ–π"
        else
            print_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ $days_left –¥–Ω–µ–π"
        fi
    else
        print_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
main() {
    echo "=================================================="
    echo "üè• –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò LEADSCHEM"
    echo "=================================================="
    echo ""
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É deployment
    cd "$(dirname "$0")"
    
    overall_status=0
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_containers || overall_status=1
    echo ""
    
    check_endpoints || overall_status=1
    echo ""
    
    check_database || overall_status=1
    echo ""
    
    check_redis || overall_status=1
    echo ""
    
    check_resources
    echo ""
    
    check_logs
    echo ""
    
    check_ssl
    echo ""
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    echo "=================================================="
    if [ $overall_status -eq 0 ]; then
        print_success "üéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ù–û–†–ú–ê–õ–¨–ù–û!"
    else
        print_error "‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï!"
    fi
    echo "=================================================="
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo ""
    echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "   –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f docker-compose.production.yml logs -f"
    echo "   –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: docker-compose -f docker-compose.production.yml ps"
    echo "   –†–µ—Å—É—Ä—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: docker stats"
    echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: docker-compose -f docker-compose.production.yml restart <service>"
    
    exit $overall_status
}

main "$@" 