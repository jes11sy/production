#!/bin/bash

# =========================================
# üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´
# =========================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${GREEN}[OK]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

PROJECT_DIR="/opt/leadschem"

# =========================================
# –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –†–ï–°–£–†–°–û–í
# =========================================

check_system_resources() {
    echo -e "${PURPLE}=== üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´ ===${NC}"
    
    # CPU –∑–∞–≥—Ä—É–∑–∫–∞
    CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    CPU_LOAD=$(uptime | awk -F'load average:' '{print $2}' | cut -d',' -f1 | xargs)
    
    if (( $(echo "$CPU_USAGE > 80" | bc -l) )); then
        warn "CPU –∑–∞–≥—Ä—É–∑–∫–∞: ${CPU_USAGE}% (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
    else
        log "CPU –∑–∞–≥—Ä—É–∑–∫–∞: ${CPU_USAGE}%"
    fi
    
    log "Load Average: $CPU_LOAD"
    
    # –ü–∞–º—è—Ç—å
    MEMORY_INFO=$(free -h | grep "Mem:")
    MEMORY_USED=$(echo $MEMORY_INFO | awk '{print $3}')
    MEMORY_TOTAL=$(echo $MEMORY_INFO | awk '{print $2}')
    MEMORY_PERCENT=$(free | grep Mem | awk '{printf("%.1f", $3/$2 * 100.0)}')
    
    if (( $(echo "$MEMORY_PERCENT > 85" | bc -l) )); then
        warn "–ü–∞–º—è—Ç—å: ${MEMORY_USED}/${MEMORY_TOTAL} (${MEMORY_PERCENT}% - –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)"
    else
        log "–ü–∞–º—è—Ç—å: ${MEMORY_USED}/${MEMORY_TOTAL} (${MEMORY_PERCENT}%)"
    fi
    
    # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    echo ""
    info "–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:"
    df -h | grep -E "(Filesystem|/dev/)" | while read line; do
        if echo "$line" | grep -q "Filesystem"; then
            continue
        fi
        
        USAGE=$(echo "$line" | awk '{print $5}' | cut -d'%' -f1)
        MOUNT=$(echo "$line" | awk '{print $6}')
        
        if [ "$USAGE" -gt 85 ]; then
            warn "  $line (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)"
        elif [ "$USAGE" -gt 70 ]; then
            warn "  $line (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)"
        else
            log "  $line"
        fi
    done
    
    echo ""
}

# =========================================
# –ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
# =========================================

check_docker_containers() {
    echo -e "${PURPLE}=== üê≥ DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–´ ===${NC}"
    
    if [ ! -d "$PROJECT_DIR" ]; then
        error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
        return 1
    fi
    
    cd $PROJECT_DIR
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    CONTAINERS=$(docker compose -f deployment/docker-compose.production.yml ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}")
    
    echo "$CONTAINERS" | while IFS=$'\t' read -r service status ports; do
        if [ "$service" == "SERVICE" ]; then
            continue
        fi
        
        if echo "$status" | grep -q "Up"; then
            log "$service: $status"
        else
            error "$service: $status"
        fi
    done
    
    echo ""
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
    info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" | head -10
    
    echo ""
}

# =========================================
# –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–´–• –°–ï–†–í–ò–°–û–í
# =========================================

check_network_services() {
    echo -e "${PURPLE}=== üåê –°–ï–¢–ï–í–´–ï –°–ï–†–í–ò–°–´ ===${NC}"
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # Backend
    if curl -s -f --connect-timeout 5 http://127.0.0.1:8000/health > /dev/null; then
        log "Backend API (8000): –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "Backend API (8000): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Frontend
    if curl -s -f --connect-timeout 5 http://127.0.0.1:3000 > /dev/null; then
        log "Frontend (3000): –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "Frontend (3000): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Redis
    if docker compose -f $PROJECT_DIR/deployment/docker-compose.production.yml exec -T redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
        log "Redis: –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "Redis: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # PostgreSQL (–≤–Ω–µ—à–Ω—è—è –ë–î)
    if [ -f "$PROJECT_DIR/.env" ]; then
        source $PROJECT_DIR/.env
        if PGPASSWORD="$POSTGRESQL_PASSWORD" timeout 10 psql -h "$POSTGRESQL_HOST" -U "$POSTGRESQL_USER" -d "$POSTGRESQL_DBNAME" -c "SELECT 1;" > /dev/null 2>&1; then
            log "PostgreSQL: –¥–æ—Å—Ç—É–ø–Ω–∞"
        else
            error "PostgreSQL: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
    fi
    
    echo ""
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # HTTPS —Å–∞–π—Ç
    if curl -s -f --connect-timeout 10 https://lead-schem.ru > /dev/null; then
        log "HTTPS —Å–∞–π—Ç: –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "HTTPS —Å–∞–π—Ç: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # API —á–µ—Ä–µ–∑ HTTPS
    if curl -s -f --connect-timeout 10 https://lead-schem.ru/api/v1/health > /dev/null; then
        log "API —á–µ—Ä–µ–∑ HTTPS: –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "API —á–µ—Ä–µ–∑ HTTPS: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    echo ""
}

# =========================================
# –ü–†–û–í–ï–†–ö–ê NGINX –ò SSL
# =========================================

check_nginx_ssl() {
    echo -e "${PURPLE}=== üîí NGINX –ò SSL ===${NC}"
    
    # –°—Ç–∞—Ç—É—Å Nginx
    if systemctl is-active --quiet nginx; then
        log "Nginx: –∑–∞–ø—É—â–µ–Ω"
    else
        error "Nginx: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
    if nginx -t &>/dev/null; then
        log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"
    else
        error "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx: —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏"
    fi
    
    # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    if [ -f "/etc/letsencrypt/live/lead-schem.ru/fullchain.pem" ]; then
        CERT_EXPIRY=$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/lead-schem.ru/fullchain.pem | cut -d= -f2)
        CERT_EXPIRY_EPOCH=$(date -d "$CERT_EXPIRY" +%s)
        CURRENT_EPOCH=$(date +%s)
        DAYS_UNTIL_EXPIRY=$(( (CERT_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
        
        if [ $DAYS_UNTIL_EXPIRY -lt 7 ]; then
            error "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_UNTIL_EXPIRY –¥–Ω–µ–π"
        elif [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
            warn "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_UNTIL_EXPIRY –¥–Ω–µ–π"
        else
            log "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç ($DAYS_UNTIL_EXPIRY –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)"
        fi
    else
        error "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    echo ""
}

# =========================================
# –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í
# =========================================

check_logs() {
    echo -e "${PURPLE}=== üìù –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í ===${NC}"
    
    cd $PROJECT_DIR
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å):"
    
    # Backend –æ—à–∏–±–∫–∏
    BACKEND_ERRORS=$(docker compose -f deployment/docker-compose.production.yml logs --since=1h backend 2>/dev/null | grep -i "error\|exception\|critical" | wc -l)
    if [ $BACKEND_ERRORS -gt 0 ]; then
        warn "Backend: $BACKEND_ERRORS –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
        docker compose -f deployment/docker-compose.production.yml logs --since=1h --tail=5 backend | grep -i "error\|exception\|critical" | tail -3
    else
        log "Backend: –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    fi
    
    # Frontend –æ—à–∏–±–∫–∏
    FRONTEND_ERRORS=$(docker compose -f deployment/docker-compose.production.yml logs --since=1h frontend 2>/dev/null | grep -i "error\|exception\|critical" | wc -l)
    if [ $FRONTEND_ERRORS -gt 0 ]; then
        warn "Frontend: $FRONTEND_ERRORS –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
    else
        log "Frontend: –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    fi
    
    # Nginx –æ—à–∏–±–∫–∏
    if [ -f "/var/log/nginx/error.log" ]; then
        NGINX_ERRORS=$(tail -100 /var/log/nginx/error.log | grep "$(date '+%Y/%m/%d %H')" | wc -l)
        if [ $NGINX_ERRORS -gt 0 ]; then
            warn "Nginx: $NGINX_ERRORS –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
        else
            log "Nginx: –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        fi
    fi
    
    echo ""
}

# =========================================
# –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =========================================

check_database() {
    echo -e "${PURPLE}=== üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• ===${NC}"
    
    if [ -f "$PROJECT_DIR/.env" ]; then
        source $PROJECT_DIR/.env
        
        # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        DB_SIZE=$(PGPASSWORD="$POSTGRESQL_PASSWORD" psql -h "$POSTGRESQL_HOST" -U "$POSTGRESQL_USER" -d "$POSTGRESQL_DBNAME" -t -c "SELECT pg_size_pretty(pg_database_size('$POSTGRESQL_DBNAME'));" 2>/dev/null | xargs)
        if [ $? -eq 0 ]; then
            log "–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $DB_SIZE"
        else
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        fi
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        CONNECTIONS=$(PGPASSWORD="$POSTGRESQL_PASSWORD" psql -h "$POSTGRESQL_HOST" -U "$POSTGRESQL_USER" -d "$POSTGRESQL_DBNAME" -t -c "SELECT count(*) FROM pg_stat_activity WHERE datname='$POSTGRESQL_DBNAME';" 2>/dev/null | xargs)
        if [ $? -eq 0 ]; then
            if [ $CONNECTIONS -gt 80 ]; then
                warn "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: $CONNECTIONS (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
            else
                log "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: $CONNECTIONS"
            fi
        fi
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–≥—Ä–∞—Ü–∏—è
        MIGRATION=$(docker compose -f $PROJECT_DIR/deployment/docker-compose.production.yml exec -T backend alembic current 2>/dev/null | tail -1)
        if [ $? -eq 0 ]; then
            log "–¢–µ–∫—É—â–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: $MIGRATION"
        else
            warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏—è—Ö"
        fi
    fi
    
    echo ""
}

# =========================================
# –ü–†–û–í–ï–†–ö–ê BACKUP
# =========================================

check_backups() {
    echo -e "${PURPLE}=== üíæ –†–ï–ó–ï–†–í–ù–´–ï –ö–û–ü–ò–ò ===${NC}"
    
    BACKUP_DIR="/opt/leadschem/backups"
    
    if [ -d "$BACKUP_DIR" ]; then
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π backup
        LAST_BACKUP=$(ls -t $BACKUP_DIR/*.gz 2>/dev/null | head -1)
        if [ -n "$LAST_BACKUP" ]; then
            BACKUP_DATE=$(stat -c %y "$LAST_BACKUP" | cut -d' ' -f1)
            BACKUP_SIZE=$(ls -lh "$LAST_BACKUP" | awk '{print $5}')
            DAYS_AGO=$(( ($(date +%s) - $(stat -c %Y "$LAST_BACKUP")) / 86400 ))
            
            if [ $DAYS_AGO -gt 3 ]; then
                warn "–ü–æ—Å–ª–µ–¥–Ω–∏–π backup: $BACKUP_DATE ($DAYS_AGO –¥–Ω–µ–π –Ω–∞–∑–∞–¥, $BACKUP_SIZE)"
            else
                log "–ü–æ—Å–ª–µ–¥–Ω–∏–π backup: $BACKUP_DATE ($DAYS_AGO –¥–Ω–µ–π –Ω–∞–∑–∞–¥, $BACKUP_SIZE)"
            fi
        else
            error "Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
        BACKUP_COUNT=$(ls $BACKUP_DIR/*.gz 2>/dev/null | wc -l)
        log "–í—Å–µ–≥–æ backup —Ñ–∞–π–ª–æ–≤: $BACKUP_COUNT"
        
        # –†–∞–∑–º–µ—Ä –≤—Å–µ—Ö backup
        TOTAL_SIZE=$(du -sh $BACKUP_DIR 2>/dev/null | cut -f1)
        log "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä backup: $TOTAL_SIZE"
    else
        error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backup –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $BACKUP_DIR"
    fi
    
    echo ""
}

# =========================================
# –°–í–û–î–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø
# =========================================

show_summary() {
    echo -e "${CYAN}=== üìã –°–í–û–î–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø ===${NC}"
    
    UPTIME=$(uptime -p)
    log "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: $UPTIME"
    
    # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º
    ISSUES=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    if ! curl -s -f --connect-timeout 5 https://lead-schem.ru > /dev/null; then
        ((ISSUES++))
    fi
    
    if ! systemctl is-active --quiet nginx; then
        ((ISSUES++))
    fi
    
    if ! docker compose -f $PROJECT_DIR/deployment/docker-compose.production.yml ps | grep -q "Up"; then
        ((ISSUES++))
    fi
    
    if [ $ISSUES -eq 0 ]; then
        log "–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ù–û–†–ú–ê–õ–¨–ù–û ‚úÖ"
    elif [ $ISSUES -eq 1 ]; then
        warn "–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –û–ë–ù–ê–†–£–ñ–ï–ù–ê 1 –ü–†–û–ë–õ–ï–ú–ê ‚ö†Ô∏è"
    else
        error "–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –û–ë–ù–ê–†–£–ñ–ï–ù–û $ISSUES –ü–†–û–ë–õ–ï–ú ‚ùå"
    fi
    
    echo ""
    info "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ: https://lead-schem.ru/monitoring/"
    echo ""
}

# =========================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =========================================

main() {
    clear
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë               üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì LEAD-SCHEM                      ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                    $(date)                     ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    case "$1" in
        --system)
            check_system_resources
            ;;
        --docker)
            check_docker_containers
            ;;
        --network)
            check_network_services
            ;;
        --nginx)
            check_nginx_ssl
            ;;
        --logs)
            check_logs
            ;;
        --database)
            check_database
            ;;
        --backup)
            check_backups
            ;;
        --quick)
            check_docker_containers
            check_network_services
            show_summary
            ;;
        *)
            # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            check_system_resources
            check_docker_containers
            check_network_services
            check_nginx_ssl
            check_database
            check_logs
            check_backups
            show_summary
            ;;
    esac
}

# =========================================
# HELP
# =========================================

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  (–±–µ–∑ –æ–ø—Ü–∏–π)  –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    echo "  --system     –¢–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
    echo "  --docker     –¢–æ–ª—å–∫–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "  --network    –¢–æ–ª—å–∫–æ —Å–µ—Ç–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  --nginx      –¢–æ–ª—å–∫–æ Nginx –∏ SSL"
    echo "  --logs       –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"
    echo "  --database   –¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    echo "  --backup     –¢–æ–ª—å–∫–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
    echo "  --quick      –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (Docker + —Å–µ—Ç—å + —Å–≤–æ–¥–∫–∞)"
    echo "  --help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0               # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    echo "  $0 --quick      # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    echo "  $0 --logs       # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö"
    exit 0
fi

# –ó–∞–ø—É—Å–∫
main "$1" 