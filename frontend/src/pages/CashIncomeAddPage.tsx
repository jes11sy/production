import React, { useCallback, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Input, 
  Button, 
  Select, 
  SelectItem, 
  Card, 
  Textarea, 
  Divider 
} from '@heroui/react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { 
  ArrowLeftIcon, 
  PlusCircleIcon, 
  BanknotesIcon, 
  CalendarIcon 
} from '@heroicons/react/24/outline';
import dayjs from 'dayjs';
import { transactionsApi, type TransactionCreate } from '../api/transactions';
import { useAuth } from '../contexts/AuthContext';
import { useAppData } from '../contexts/AppDataContext';
import { useApiData } from '../hooks/useApiData';
import { useNotification } from '../contexts/NotificationContext';

const schema = z.object({
  city_id: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥'),
  transaction_type_id: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Ö–æ–¥–∞'),
  specified_date: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'),
  amount: z.number().min(0.01, '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'),
  payment_reason: z.string().min(1, '–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞'),
  notes: z.string().optional(),
});

type FormData = z.infer<typeof schema>;

const CashIncomeAddPage: React.FC = () => {
  const { user } = useAuth();
  const { cities } = useAppData();
  const { showSuccess, showError } = useNotification();
  const navigate = useNavigate();

  const { register, handleSubmit, setValue, watch, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      specified_date: dayjs().format('YYYY-MM-DD'),
      city_id: ''
    }
  });

  const loadTransactionTypesData = useCallback(async () => {
    const types = await transactionsApi.getTransactionTypes();
    return types.filter(t => t.name.toLowerCase().includes('–ø—Ä–∏—Ö–æ–¥'));
  }, []);

  const { data: transactionTypes = [], loading: typesLoading } = useApiData(loadTransactionTypesData);

  const currentCity = useMemo(() => null, []);

  const onSubmit = useCallback(async (data: FormData) => {
    try {
      const transactionData: TransactionCreate = {
        city_id: Number(data.city_id),
        transaction_type_id: Number(data.transaction_type_id),
        amount: String(Math.abs(data.amount)), // Positive for income
        specified_date: data.specified_date,
        notes: data.notes || '',
      };
      await transactionsApi.createTransaction(transactionData);
      showSuccess('–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
      navigate('/cash/income');
    } catch (error) {
      console.error('Error creating income:', error);
      const errorMessage = (error as { message?: string })?.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
      showError(errorMessage);
    }
  }, [showSuccess, showError, navigate]);

  const totalAmount = watch('amount') || 0;

  return (
    <div className="max-w-3xl mx-auto px-2 py-10">
      <Card className="rounded-3xl shadow-2xl border-0 bg-white/90 p-10">
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="light"
            startContent={<ArrowLeftIcon className="h-5 w-5" />}
            onClick={() => navigate('/cash/income')}
            className="!px-4 !py-2"
          >
            –ù–∞–∑–∞–¥
          </Button>
          <div className="flex items-center gap-3">
            <span className="inline-flex items-center justify-center rounded-full bg-green-100 text-green-700 mr-2 p-2">
              <BanknotesIcon className="h-7 w-7" />
            </span>
            <h1 className="text-2xl font-bold mb-0">–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥</h1>
          </div>
        </div>
        <Divider className="mb-8" />
        
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
          {/* –°–µ–∫—Ü–∏—è: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-6">
            <h5 className="text-gray-500 mb-4 flex items-center gap-2 text-lg font-semibold">
              <CalendarIcon className="h-5 w-5" /> –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h5>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ì–æ—Ä–æ–¥ <span className="text-red-500">*</span>
                </label>
                {false ? (
                  <Input
                    value={currentCity.name}
                    isDisabled
                    size="md"
                    startContent={<span className="text-gray-400">üè¢</span>}
                  />
                ) : (
                  <Select
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
                    selectedKeys={watch('city_id') ? [watch('city_id')] : []}
                    onSelectionChange={(keys) => setValue('city_id', Array.from(keys)[0] as string)}
                    isInvalid={!!errors.city_id}
                    errorMessage={errors.city_id?.message}
                    size="md"
                  >
                    {cities.map((city) => (
                      <SelectItem key={city.id}>
                        {city.name}
                      </SelectItem>
                    ))}
                  </Select>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¢–∏–ø –¥–æ—Ö–æ–¥–∞ <span className="text-red-500">*</span>
                </label>
                <Select
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
                  selectedKeys={watch('transaction_type_id') ? [watch('transaction_type_id')] : []}
                  onSelectionChange={(keys) => setValue('transaction_type_id', Array.from(keys)[0] as string)}
                  isInvalid={!!errors.transaction_type_id}
                  errorMessage={errors.transaction_type_id?.message}
                  isLoading={typesLoading}
                  size="md"
                >
                  {(transactionTypes || []).map(type => (
                    <SelectItem key={type.id}>
                      {type.name}
                    </SelectItem>
                  ))}
                </Select>
              </div>

              <Input
                label="–î–∞—Ç–∞"
                type="date"
                {...register('specified_date')}
                isInvalid={!!errors.specified_date}
                errorMessage={errors.specified_date?.message}
                size="md"
                isRequired
                startContent={<CalendarIcon className="h-4 w-4 text-gray-400" />}
              />

              <Input
                label="–°—É–º–º–∞"
                type="number"
                step="0.01"
                min="0.01"
                {...register('amount', { valueAsNumber: true })}
                isInvalid={!!errors.amount}
                errorMessage={errors.amount?.message}
                size="md"
                isRequired
                startContent={<span className="text-green-600">‚ÇΩ</span>}
                endContent={
                  totalAmount > 0 && (
                    <span className="text-sm text-green-600 font-medium">
                      {new Intl.NumberFormat('ru-RU', {
                        style: 'currency',
                        currency: 'RUB'
                      }).format(totalAmount)}
                    </span>
                  )
                }
              />
            </div>
          </div>

          <Divider />

          {/* –°–µ–∫—Ü–∏—è: –î–µ—Ç–∞–ª–∏ */}
          <div className="space-y-6">
            <h5 className="text-gray-500 mb-4 flex items-center gap-2 text-lg font-semibold">
              <PlusCircleIcon className="h-5 w-5" /> –î–µ—Ç–∞–ª–∏
            </h5>
            
            <Textarea
              label="–û—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"
              {...register('payment_reason')}
              isInvalid={!!errors.payment_reason}
              errorMessage={errors.payment_reason?.message}
              minRows={3}
              size="md"
              isRequired
              placeholder="–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞..."
            />

            <Textarea
              label="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
              {...register('notes')}
              minRows={2}
              size="md"
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)..."
            />
          </div>

          {/* –°–≤–æ–¥–∫–∞ */}
          {totalAmount > 0 && (
            <>
              <Divider />
              <div className="bg-green-50 rounded-2xl p-6">
                <h6 className="text-green-800 font-semibold mb-2">–°–≤–æ–¥–∫–∞ –ø–æ –¥–æ—Ö–æ–¥—É</h6>
                <div className="text-2xl font-bold text-green-700">
                  +{new Intl.NumberFormat('ru-RU', {
                    style: 'currency',
                    currency: 'RUB'
                  }).format(totalAmount)}
                </div>
                <p className="text-green-600 text-sm mt-1">
                  {currentCity ? `–≤ –≥–æ—Ä–æ–¥–µ ${currentCity.name}` : ''}
                </p>
              </div>
            </>
          )}

          <div className="flex justify-end gap-4 mt-8">
            <Button
              variant="light"
              size="lg"
              onClick={() => navigate('/cash/income')}
              startContent={<ArrowLeftIcon className="h-5 w-5" />}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              type="submit"
              color="success"
              size="lg"
              startContent={<PlusCircleIcon className="h-5 w-5" />}
            >
              –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
            </Button>
          </div>
        </form>
      </Card>
    </div>
  );
};

export default CashIncomeAddPage; 